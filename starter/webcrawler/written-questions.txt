Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.



    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    It is because of Profiler which accumulate the time by parser, reflection need a bit time to do some task because of we do not use directly class or method then it is take time a bit more even in millisecond
    scales.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        While we use multi Thread Sometimes we face synchronization problem,then I think the sequential web crawler takes all web pages and run them
        therefore need one thread and there is no Synchronization problem or maybe our system is not supporting for example 8 Thread that the thread should be decrease in
        low number.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        As long as our computer is support multi threads and we do Synchronization  I think parallel web crawler will do better and speedy rather than
        sequential crawler.

        In old machines, there were no multicores, there was a single core, so even though you create thousands of threads, it will always have a single core to run a single thread at a time,
         so if one thread is running, all other would have to wait for their turn, hence the reason for taking much more time than sequential as only one thread is executing there with no wait time




Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

       The cross cuting point is which is addressed with profiler class that we are able to record all performance of methods which has profiler annotation.


    (b) What are the join points of the Profiler in the web crawler program?

    Join point is a point which we execute and every annotaion Profiler is join point.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

Builder pattern used in CrawlResult, CrawlerConfiguration, PageParser, ParserModule
What here dislike is extra code and double the constructions.

Proxy pattern: ProfilingMethodInterceptor and ProfilerImpl is used.
For every class should be created separetly proxy class which a bit more coding.


Singelton Pattern : WebcrawlerModule, ProfilerModule

in unit testing Singleton is dificult to test and in multi Thread is need to double check if it is null to avoid more instance creation.

